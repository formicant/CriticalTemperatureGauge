/*

# ClickThroughBlocker Wrapper

This is a wrapper around the [ClickThroughBlocker][1] mod
that allows using it without a hard dependency.

ClickThroughBlocker functionality will be available
only if the ClickThroughBlocker mod is installed.
Otherwise, it will fall back to the default KSP behavior.

ClickThroughBlocker v. 0.1.9.5 is supported.
Other versions may or may not work.

## Do not edit this file

There is nothing in this file that needs to be edited by hand.

## Migration from a hard dependency

- Ensure that your mod's name does not precede
  `000_ClickThroughBlocker` alphabetically.
- Add this file to your mod's project.
- Replace all the occurrences of the `ClickThroughFix` namespace
  with `Wrappers.ClickThroughFix`.
- In the _AssemblyInfo.cs_ file, remove the line
  `[assembly: KSPAssemblyDependency("ClickThroughBlocker", 1, 0)]`.
- Remove _ClickThroughBlocker_ assembly from your project dependencies.

## License

[GNU Lesser General Public License v3.0][2].

[1]: https://github.com/linuxgurugamer/ClickThroughBlocker
[2]: https://www.gnu.org/licenses/lgpl-3.0.en.html

*/

using System;
using System.Linq;
using UnityEngine;

namespace Wrappers.ClickThroughFix
{
	public static class ClickThruBlocker
	{
		#region Public

		/// <summary>Whether the ClickThruBlocker mod is installed.</summary>
		public static bool IsModInstalled { get; }

		public static Rect GUILayoutWindow(int id, Rect screenRect, GUI.WindowFunction func, string text, params GUILayoutOption[] options) => _layoutWindowText(id, screenRect, func, text, options);
		public static Rect GUILayoutWindow(int id, Rect screenRect, GUI.WindowFunction func, Texture image, params GUILayoutOption[] options) => _layoutWindowImage(id, screenRect, func, image, options);
		public static Rect GUILayoutWindow(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content, params GUILayoutOption[] options) => _layoutWindowContent(id, screenRect, func, content, options);
		public static Rect GUILayoutWindow(int id, Rect screenRect, GUI.WindowFunction func, string text, GUIStyle style, params GUILayoutOption[] options) => _layoutWindowTextStyle(id, screenRect, func, text, style, options);
		public static Rect GUILayoutWindow(int id, Rect screenRect, GUI.WindowFunction func, Texture image, GUIStyle style, params GUILayoutOption[] options) => _layoutWindowImageStyle(id, screenRect, func, image, style, options);
		public static Rect GUILayoutWindow(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content, GUIStyle style, params GUILayoutOption[] options) => _layoutWindowContentStyle(id, screenRect, func, content, style, options);

		public static Rect GUIWindow(int id, Rect screenRect, GUI.WindowFunction func, string text) => _windowText(id, screenRect, func, text);
		public static Rect GUIWindow(int id, Rect screenRect, GUI.WindowFunction func, Texture image) => _windowImage(id, screenRect, func, image);
		public static Rect GUIWindow(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content) => _windowContent(id, screenRect, func, content);
		public static Rect GUIWindow(int id, Rect screenRect, GUI.WindowFunction func, string text, GUIStyle style) => _windowTextStyle(id, screenRect, func, text, style);
		public static Rect GUIWindow(int id, Rect screenRect, GUI.WindowFunction func, Texture image, GUIStyle style) => _windowImageStyle(id, screenRect, func, image, style);
		public static Rect GUIWindow(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content, GUIStyle style) => _windowContentStyle(id, screenRect, func, content, style);

		public static Rect GUIModalWindow(int id, Rect screenRect, GUI.WindowFunction func, string text) => _modalWindowText(id, screenRect, func, text);
		public static Rect GUIModalWindow(int id, Rect screenRect, GUI.WindowFunction func, Texture image) => _modalWindowImage(id, screenRect, func, image);
		public static Rect GUIModalWindow(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content) => _modalWindowContent(id, screenRect, func, content);
		public static Rect GUIModalWindow(int id, Rect screenRect, GUI.WindowFunction func, string text, GUIStyle style) => _modalWindowTextStyle(id, screenRect, func, text, style);
		public static Rect GUIModalWindow(int id, Rect screenRect, GUI.WindowFunction func, Texture image, GUIStyle style) => _modalWindowImageStyle(id, screenRect, func, image, style);
		public static Rect GUIModalWindow(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content, GUIStyle style) => _modalWindowContentStyle(id, screenRect, func, content, style);

		#endregion

		#region Private

		const string AssemblyName = "ClickThroughBlocker";

		delegate Rect TextDelegate(int id, Rect screenRect, GUI.WindowFunction func, string text);
		delegate Rect ImageDelegate(int id, Rect screenRect, GUI.WindowFunction func, Texture image);
		delegate Rect ContentDelegate(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content);
		delegate Rect TextStyleDelegate(int id, Rect screenRect, GUI.WindowFunction func, string text, GUIStyle style);
		delegate Rect ImageStyleDelegate(int id, Rect screenRect, GUI.WindowFunction func, Texture image, GUIStyle style);
		delegate Rect ContentStyleDelegate(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content, GUIStyle style);

		delegate Rect TextOptionsDelegate(int id, Rect screenRect, GUI.WindowFunction func, string text, params GUILayoutOption[] options);
		delegate Rect ImageOptionsDelegate(int id, Rect screenRect, GUI.WindowFunction func, Texture image, params GUILayoutOption[] options);
		delegate Rect ContentOptionsDelegate(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content, params GUILayoutOption[] options);
		delegate Rect TextStyleOptionsDelegate(int id, Rect screenRect, GUI.WindowFunction func, string text, GUIStyle style, params GUILayoutOption[] options);
		delegate Rect ImageStyleOptionsDelegate(int id, Rect screenRect, GUI.WindowFunction func, Texture image, GUIStyle style, params GUILayoutOption[] options);
		delegate Rect ContentStyleOptionsDelegate(int id, Rect screenRect, GUI.WindowFunction func, GUIContent content, GUIStyle style, params GUILayoutOption[] options);

		static readonly TextOptionsDelegate _layoutWindowText = GUILayout.Window;
		static readonly ImageOptionsDelegate _layoutWindowImage = GUILayout.Window;
		static readonly ContentOptionsDelegate _layoutWindowContent = GUILayout.Window;
		static readonly TextStyleOptionsDelegate _layoutWindowTextStyle = GUILayout.Window;
		static readonly ImageStyleOptionsDelegate _layoutWindowImageStyle = GUILayout.Window;
		static readonly ContentStyleOptionsDelegate _layoutWindowContentStyle = GUILayout.Window;

		static readonly TextDelegate _windowText = GUI.Window;
		static readonly ImageDelegate _windowImage = GUI.Window;
		static readonly ContentDelegate _windowContent = GUI.Window;
		static readonly TextStyleDelegate _windowTextStyle = GUI.Window;
		static readonly ImageStyleDelegate _windowImageStyle = GUI.Window;
		static readonly ContentStyleDelegate _windowContentStyle = GUI.Window;

		static readonly TextDelegate _modalWindowText = GUI.ModalWindow;
		static readonly ImageDelegate _modalWindowImage = GUI.ModalWindow;
		static readonly ContentDelegate _modalWindowContent = GUI.ModalWindow;
		static readonly TextStyleDelegate _modalWindowTextStyle = GUI.ModalWindow;
		static readonly ImageStyleDelegate _modalWindowImageStyle = GUI.ModalWindow;
		static readonly ContentStyleDelegate _modalWindowContentStyle = GUI.ModalWindow;

		static ClickThruBlocker()
		{
			var assembly = AssemblyLoader.loadedAssemblies
				.FirstOrDefault(a => a.name.Equals(AssemblyName, StringComparison.Ordinal))
				?.assembly;

			IsModInstalled = assembly is object;
			Debug.Log($"[{nameof(Wrappers)}]: {AssemblyName} is {(IsModInstalled ? "" : "NOT ")}available.");

			if(IsModInstalled)
			{
				var type = assembly.GetType($"{nameof(ClickThroughFix)}.{nameof(ClickThruBlocker)}");

				_layoutWindowText = type.GetMethodDelegate<TextOptionsDelegate>(nameof(GUILayoutWindow));
				_layoutWindowImage = type.GetMethodDelegate<ImageOptionsDelegate>(nameof(GUILayoutWindow));
				_layoutWindowContent = type.GetMethodDelegate<ContentOptionsDelegate>(nameof(GUILayoutWindow));
				_layoutWindowTextStyle = type.GetMethodDelegate<TextStyleOptionsDelegate>(nameof(GUILayoutWindow));
				_layoutWindowImageStyle = type.GetMethodDelegate<ImageStyleOptionsDelegate>(nameof(GUILayoutWindow));
				_layoutWindowContentStyle = type.GetMethodDelegate<ContentStyleOptionsDelegate>(nameof(GUILayoutWindow));

				_windowText = type.GetMethodDelegate<TextDelegate>(nameof(GUIWindow));
				_windowImage = type.GetMethodDelegate<ImageDelegate>(nameof(GUIWindow));
				_windowContent = type.GetMethodDelegate<ContentDelegate>(nameof(GUIWindow));
				_windowTextStyle = type.GetMethodDelegate<TextStyleDelegate>(nameof(GUIWindow));
				_windowImageStyle = type.GetMethodDelegate<ImageStyleDelegate>(nameof(GUIWindow));
				_windowContentStyle = type.GetMethodDelegate<ContentStyleDelegate>(nameof(GUIWindow));

				_modalWindowText = type.GetMethodDelegate<TextDelegate>(nameof(GUIModalWindow));
				_modalWindowImage = type.GetMethodDelegate<ImageDelegate>(nameof(GUIModalWindow));
				_modalWindowContent = type.GetMethodDelegate<ContentDelegate>(nameof(GUIModalWindow));
				_modalWindowTextStyle = type.GetMethodDelegate<TextStyleDelegate>(nameof(GUIModalWindow));
				_modalWindowImageStyle = type.GetMethodDelegate<ImageStyleDelegate>(nameof(GUIModalWindow));
				_modalWindowContentStyle = type.GetMethodDelegate<ContentStyleDelegate>(nameof(GUIModalWindow));
			}
		}

		static TSignature GetMethodDelegate<TSignature>(this Type type, string methodName) where TSignature : Delegate =>
			(TSignature) Delegate.CreateDelegate(typeof(TSignature), type, methodName);

		#endregion
	}
}
